spring.application.name=passwordDemo

#打印sql
spring.shardingsphere.props.sql-show=true

#配置sharding的数据源
spring.shardingsphere.datasource.names=m0

spring.shardingsphere.datasource.m0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.dirver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m0.url=jdbc:mysql://localhost:3306/sharding
spring.shardingsphere.datasource.m0.username=root
spring.shardingsphere.datasource.m0.password=root

######################################### 加密列和原文列同时存在的表 ####################################
#加密列和原文列同时存在的表
spring.shardingsphere.rules.sharding.tables.user.actual-data-nodes=m0.user_0

#配置分布式id的算法
spring.shardingsphere.rules.sharding.tables.user.key-generate-strategy.column=userid
spring.shardingsphere.rules.sharding.tables.user.key-generate-strategy.key-generator-name=alg_snow
spring.shardingsphere.rules.sharding.key-generators.alg_snow.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.alg_snow.props.worker-id=1

#加密策略（下面的配置是同时存在加密列和原文列的配置）
#查询加密列：true表示 查询sql是使用加密数据。否则使用原文列查询。
spring.shardingsphere.rules.encrypt.tables.user.query-with-cipher-column=true
#原文列
spring.shardingsphere.rules.encrypt.tables.user.columns.userPassword.plain-column=userPassword
#加密列
spring.shardingsphere.rules.encrypt.tables.user.columns.userPassword.cipher-column=userPassword_
#加密算法
spring.shardingsphere.rules.encrypt.tables.user.columns.userPassword.encryptor-name=user_password_encrypted
#加密算法的配置：MD5，AES、SM3、SM4等。MD5是hash算法，不需要配置秘钥
spring.shardingsphere.rules.encrypt.encryptors.user_password_encrypted.type=MD5
######################################### 加密列和原文列同时存在的表 ####################################

######################################### 只有加密列存在的表 ####################################
#只有加密列的表
spring.shardingsphere.rules.sharding.tables.user_no_password.actual-data-nodes=m0.user_1

#配置分布式id的算法
spring.shardingsphere.rules.sharding.tables.user_no_password.key-generate-strategy.column=userid
spring.shardingsphere.rules.sharding.tables.user_no_password.key-generate-strategy.key-generator-name=password_alg_snow
spring.shardingsphere.rules.sharding.key-generators.password_alg_snow.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.password_alg_snow.props.worker-id=1

#加密策略（下面的配置是同时存在加密列和原文列的配置）
#查询加密列：true表示 查询sql是使用加密数据。否则使用原文列查询。
spring.shardingsphere.rules.encrypt.tables.user_no_password.query-with-cipher-column=true
#加密列
spring.shardingsphere.rules.encrypt.tables.user_no_password.columns.userPassword.cipher-column=userPassword_
#加密算法
spring.shardingsphere.rules.encrypt.tables.user_no_password.columns.userPassword.encryptor-name=user_without_password_encrypted
#加密算法的配置：MD5，AES、SM3、SM4等。MD5是hash算法，不需要配置秘钥
spring.shardingsphere.rules.encrypt.encryptors.user_without_password_encrypted.type=AES
#部分算法配置加密秘钥，例如：aes-key-value。
spring.shardingsphere.rules.encrypt.encryptors.user_without_password_encrypted.props.aes-key-value=abcdef
######################################### 只有加密列存在的表 ####################################